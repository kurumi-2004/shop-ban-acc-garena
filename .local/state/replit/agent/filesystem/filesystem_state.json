{"file_contents":{"app.py":{"content":"from flask import Flask, render_template, redirect, url_for, flash, request, jsonify\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom functools import wraps\nfrom datetime import datetime\nimport os\n\nfrom extensions import db, login_manager, migrate, cipher_suite\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')\ndatabase_url = os.environ.get('DATABASE_URL')\nif not database_url:\n    import warnings\n    warnings.warn('DATABASE_URL not set, using SQLite for development. Production requires PostgreSQL.')\n    database_url = 'sqlite:///shop.db'\napp.config['SQLALCHEMY_DATABASE_URI'] = database_url\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb.init_app(app)\nmigrate.init_app(app, db)\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Vui lòng đăng nhập để tiếp tục.'\n\nfrom models import User, GameAccount, Order, CartItem, AuditLog, Wishlist\nfrom forms import LoginForm, RegisterForm, CheckoutForm, AccountForm\n\ndef role_required(required_role):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                flash('Vui lòng đăng nhập để tiếp tục.', 'warning')\n                return redirect(url_for('login'))\n            if not current_user.has_permission(required_role):\n                flash('Bạn không có quyền truy cập.', 'danger')\n                AuditLog.create_log(current_user.id, 'access_denied', \n                                   f'Attempted to access {request.endpoint} without permission', \n                                   request.remote_addr)\n                return redirect(url_for('index'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route('/')\ndef index():\n    page = request.args.get('page', 1, type=int)\n    category = request.args.get('category', '')\n    rank = request.args.get('rank', '')\n    min_price = request.args.get('min_price', type=float)\n    max_price = request.args.get('max_price', type=float)\n    search = request.args.get('search', '')\n    \n    query = GameAccount.query.filter_by(is_sold=False)\n    \n    if category:\n        query = query.filter_by(category=category)\n    if rank:\n        query = query.filter_by(rank=rank)\n    if min_price:\n        query = query.filter(GameAccount.price >= min_price)\n    if max_price:\n        query = query.filter(GameAccount.price <= max_price)\n    if search:\n        query = query.filter(GameAccount.title.ilike(f'%{search}%'))\n    \n    accounts = query.order_by(GameAccount.created_at.desc()).paginate(\n        page=page, per_page=12, error_out=False\n    )\n    \n    categories = db.session.query(GameAccount.category).distinct().all()\n    ranks = db.session.query(GameAccount.rank).distinct().all()\n    \n    return render_template('index.html', \n                         accounts=accounts,\n                         categories=[c[0] for c in categories],\n                         ranks=[r[0] for r in ranks])\n\n@app.route('/account/<int:account_id>')\ndef account_detail(account_id):\n    account = GameAccount.query.get_or_404(account_id)\n    if current_user.is_authenticated:\n        AuditLog.create_log(current_user.id, 'view_account', \n                           f'Viewed account {account_id}', request.remote_addr)\n    return render_template('account_detail.html', account=account)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user, remember=form.remember.data)\n            AuditLog.create_log(user.id, 'login', f'User logged in', request.remote_addr)\n            next_page = request.args.get('next')\n            flash('Đăng nhập thành công!', 'success')\n            return redirect(next_page if next_page else url_for('index'))\n        else:\n            flash('Email hoặc mật khẩu không đúng.', 'danger')\n            AuditLog.create_log(None, 'login_failed', \n                               f'Failed login attempt for {form.email.data}', \n                               request.remote_addr)\n    \n    return render_template('login.html', form=form)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = RegisterForm()\n    if form.validate_on_submit():\n        user = User(\n            email=form.email.data,\n            username=form.username.data,\n            full_name=form.full_name.data,\n            phone=form.phone.data\n        )\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        AuditLog.create_log(user.id, 'register', f'New user registered: {user.username}', request.remote_addr)\n        flash('Đăng ký thành công! Vui lòng đăng nhập.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    AuditLog.create_log(current_user.id, 'logout', 'User logged out', request.remote_addr)\n    logout_user()\n    flash('Đã đăng xuất thành công.', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/cart')\n@login_required\ndef cart():\n    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()\n    total = sum(item.account.price for item in cart_items)\n    return render_template('cart.html', cart_items=cart_items, total=total)\n\n@app.route('/add_to_cart/<int:account_id>', methods=['POST'])\n@login_required\ndef add_to_cart(account_id):\n    account = GameAccount.query.get_or_404(account_id)\n    \n    if account.is_sold:\n        return jsonify({'success': False, 'message': 'Tài khoản đã được bán'}), 400\n    \n    existing_item = CartItem.query.filter_by(\n        user_id=current_user.id,\n        account_id=account_id\n    ).first()\n    \n    if existing_item:\n        return jsonify({'success': False, 'message': 'Tài khoản đã có trong giỏ hàng'}), 400\n    \n    cart_item = CartItem(user_id=current_user.id, account_id=account_id)\n    db.session.add(cart_item)\n    db.session.commit()\n    \n    AuditLog.create_log(current_user.id, 'add_to_cart', \n                       f'Added account {account_id} to cart', request.remote_addr)\n    \n    return jsonify({'success': True, 'message': 'Đã thêm vào giỏ hàng'})\n\n@app.route('/remove_from_cart/<int:item_id>', methods=['POST'])\n@login_required\ndef remove_from_cart(item_id):\n    cart_item = CartItem.query.get_or_404(item_id)\n    if cart_item.user_id != current_user.id:\n        return jsonify({'success': False, 'message': 'Không có quyền'}), 403\n    \n    db.session.delete(cart_item)\n    db.session.commit()\n    \n    AuditLog.create_log(current_user.id, 'remove_from_cart', \n                       f'Removed cart item {item_id}', request.remote_addr)\n    \n    return jsonify({'success': True, 'message': 'Đã xóa khỏi giỏ hàng'})\n\n@app.route('/checkout', methods=['GET', 'POST'])\n@login_required\ndef checkout():\n    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()\n    \n    if not cart_items:\n        flash('Giỏ hàng trống.', 'warning')\n        return redirect(url_for('cart'))\n    \n    total = sum(item.account.price for item in cart_items)\n    form = CheckoutForm()\n    \n    if form.validate_on_submit():\n        order = Order(\n            user_id=current_user.id,\n            total_amount=total,\n            customer_name=form.customer_name.data,\n            customer_email=form.customer_email.data,\n            customer_phone=form.customer_phone.data,\n            status='pending'\n        )\n        db.session.add(order)\n        db.session.flush()\n        \n        for cart_item in cart_items:\n            cart_item.account.is_sold = True\n            cart_item.account.order_id = order.id\n            db.session.delete(cart_item)\n        \n        db.session.commit()\n        \n        AuditLog.create_log(current_user.id, 'create_order', \n                           f'Created order {order.id} with {len(cart_items)} items, total {total}', \n                           request.remote_addr)\n        \n        flash('Đơn hàng đã được tạo! Vui lòng chờ xử lý thanh toán.', 'success')\n        return redirect(url_for('order_detail', order_id=order.id))\n    \n    return render_template('checkout.html', form=form, cart_items=cart_items, total=total)\n\n@app.route('/orders')\n@login_required\ndef orders():\n    user_orders = Order.query.filter_by(user_id=current_user.id).order_by(Order.created_at.desc()).all()\n    return render_template('orders.html', orders=user_orders)\n\n@app.route('/order/<int:order_id>')\n@login_required\ndef order_detail(order_id):\n    order = Order.query.get_or_404(order_id)\n    if order.user_id != current_user.id and not current_user.has_permission('support'):\n        flash('Không có quyền truy cập đơn hàng này.', 'danger')\n        AuditLog.create_log(current_user.id, 'access_denied', \n                           f'Attempted to access order {order_id}', request.remote_addr)\n        return redirect(url_for('orders'))\n    \n    if order.status == 'completed':\n        AuditLog.create_log(current_user.id, 'view_credentials', \n                           f'Viewed credentials for order {order_id}', request.remote_addr)\n    \n    return render_template('order_detail.html', order=order)\n\n@app.route('/profile')\n@login_required\ndef profile():\n    return render_template('profile.html')\n\n@app.route('/profile/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_profile():\n    if request.method == 'POST':\n        current_user.full_name = request.form.get('full_name')\n        current_user.phone = request.form.get('phone')\n        db.session.commit()\n        AuditLog.create_log(current_user.id, 'update_profile', \n                           'Updated profile information', request.remote_addr)\n        flash('Cập nhật thông tin thành công!', 'success')\n        return redirect(url_for('profile'))\n    \n    return render_template('edit_profile.html')\n\n@app.route('/admin')\n@role_required('support')\ndef admin_dashboard():\n    total_revenue = db.session.query(db.func.sum(Order.total_amount)).filter_by(status='completed').scalar() or 0\n    total_accounts = GameAccount.query.count()\n    sold_accounts = GameAccount.query.filter_by(is_sold=True).count()\n    pending_orders = Order.query.filter_by(status='pending').count()\n    \n    recent_orders = Order.query.order_by(Order.created_at.desc()).limit(10).all()\n    \n    return render_template('admin/dashboard.html',\n                         total_revenue=total_revenue,\n                         total_accounts=total_accounts,\n                         sold_accounts=sold_accounts,\n                         pending_orders=pending_orders,\n                         recent_orders=recent_orders)\n\n@app.route('/admin/accounts')\n@role_required('support')\ndef admin_accounts():\n    page = request.args.get('page', 1, type=int)\n    accounts = GameAccount.query.order_by(GameAccount.created_at.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    return render_template('admin/accounts.html', accounts=accounts)\n\n@app.route('/admin/account/add', methods=['GET', 'POST'])\n@role_required('admin')\ndef admin_add_account():\n    form = AccountForm()\n    if form.validate_on_submit():\n        encrypted_username = cipher_suite.encrypt(form.account_username.data.encode()).decode()\n        encrypted_password = cipher_suite.encrypt(form.account_password.data.encode()).decode()\n        \n        account = GameAccount(\n            title=form.title.data,\n            description=form.description.data,\n            category=form.category.data,\n            rank=form.rank.data,\n            price=form.price.data,\n            account_username=encrypted_username,\n            account_password=encrypted_password,\n            internal_notes=form.internal_notes.data\n        )\n        db.session.add(account)\n        db.session.commit()\n        \n        AuditLog.create_log(current_user.id, 'create_account', \n                           f'Created account {account.id}: {account.title}', request.remote_addr)\n        \n        flash('Đã thêm tài khoản thành công!', 'success')\n        return redirect(url_for('admin_accounts'))\n    \n    return render_template('admin/account_form.html', form=form, action='add')\n\n@app.route('/admin/account/edit/<int:account_id>', methods=['GET', 'POST'])\n@role_required('admin')\ndef admin_edit_account(account_id):\n    account = GameAccount.query.get_or_404(account_id)\n    \n    if request.method == 'GET':\n        form = AccountForm(\n            title=account.title,\n            description=account.description,\n            category=account.category,\n            rank=account.rank,\n            price=account.price,\n            internal_notes=account.internal_notes\n        )\n    else:\n        form = AccountForm()\n    \n    if form.validate_on_submit():\n        account.title = form.title.data\n        account.description = form.description.data\n        account.category = form.category.data\n        account.rank = form.rank.data\n        account.price = form.price.data\n        account.internal_notes = form.internal_notes.data\n        \n        if form.account_username.data and form.account_username.data.strip():\n            account.account_username = cipher_suite.encrypt(form.account_username.data.encode()).decode()\n        if form.account_password.data and form.account_password.data.strip():\n            account.account_password = cipher_suite.encrypt(form.account_password.data.encode()).decode()\n        \n        db.session.commit()\n        \n        AuditLog.create_log(current_user.id, 'edit_account', \n                           f'Edited account {account.id}: {account.title}', request.remote_addr)\n        \n        flash('Đã cập nhật tài khoản thành công!', 'success')\n        return redirect(url_for('admin_accounts'))\n    \n    decrypted_username = account.get_decrypted_username()\n    decrypted_password = account.get_decrypted_password()\n    \n    return render_template('admin/account_form.html', form=form, action='edit', account=account,\n                          decrypted_username=decrypted_username, decrypted_password=decrypted_password)\n\n@app.route('/admin/account/delete/<int:account_id>', methods=['POST'])\n@role_required('admin')\ndef admin_delete_account(account_id):\n    account = GameAccount.query.get_or_404(account_id)\n    \n    if account.is_sold:\n        return jsonify({'success': False, 'message': 'Không thể xóa tài khoản đã bán'}), 400\n    \n    AuditLog.create_log(current_user.id, 'delete_account', \n                       f'Deleted account {account.id}: {account.title}', request.remote_addr)\n    \n    db.session.delete(account)\n    db.session.commit()\n    \n    return jsonify({'success': True, 'message': 'Đã xóa tài khoản'})\n\n@app.route('/admin/orders')\n@role_required('support')\ndef admin_orders():\n    page = request.args.get('page', 1, type=int)\n    orders = Order.query.order_by(Order.created_at.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    return render_template('admin/orders.html', orders=orders)\n\n@app.route('/admin/order/<int:order_id>/update_status', methods=['POST'])\n@role_required('support')\ndef admin_update_order_status(order_id):\n    order = Order.query.get_or_404(order_id)\n    new_status = request.json.get('status')\n    \n    if new_status not in ['pending', 'processing', 'completed', 'cancelled']:\n        return jsonify({'success': False, 'message': 'Trạng thái không hợp lệ'}), 400\n    \n    old_status = order.status\n    order.status = new_status\n    db.session.commit()\n    \n    AuditLog.create_log(current_user.id, 'update_order_status', \n                       f'Updated order {order.id} status from {old_status} to {new_status}', \n                       request.remote_addr)\n    \n    return jsonify({'success': True, 'message': 'Đã cập nhật trạng thái'})\n\n@app.route('/admin/logs')\n@role_required('admin')\ndef admin_logs():\n    page = request.args.get('page', 1, type=int)\n    logs = AuditLog.query.order_by(AuditLog.created_at.desc()).paginate(\n        page=page, per_page=50, error_out=False\n    )\n    return render_template('admin/logs.html', logs=logs)\n\n@app.route('/wishlist')\n@login_required\ndef wishlist():\n    wishlist_items = Wishlist.query.filter_by(user_id=current_user.id).all()\n    return render_template('wishlist.html', wishlist_items=wishlist_items)\n\n@app.route('/wishlist/add/<int:account_id>', methods=['POST'])\n@login_required\ndef add_to_wishlist(account_id):\n    account = GameAccount.query.get_or_404(account_id)\n    \n    if account.is_sold:\n        return jsonify({'success': False, 'message': 'Tài khoản đã được bán'}), 400\n    \n    existing = Wishlist.query.filter_by(user_id=current_user.id, account_id=account_id).first()\n    if existing:\n        return jsonify({'success': False, 'message': 'Đã có trong danh sách yêu thích'}), 400\n    \n    wishlist_item = Wishlist(user_id=current_user.id, account_id=account_id)\n    db.session.add(wishlist_item)\n    db.session.commit()\n    \n    AuditLog.create_log(current_user.id, 'add_to_wishlist', \n                       f'Added account {account_id} to wishlist', request.remote_addr)\n    \n    return jsonify({'success': True, 'message': 'Đã thêm vào danh sách yêu thích'})\n\n@app.route('/wishlist/remove/<int:account_id>', methods=['POST'])\n@login_required\ndef remove_from_wishlist(account_id):\n    wishlist_item = Wishlist.query.filter_by(user_id=current_user.id, account_id=account_id).first_or_404()\n    \n    db.session.delete(wishlist_item)\n    db.session.commit()\n    \n    AuditLog.create_log(current_user.id, 'remove_from_wishlist', \n                       f'Removed account {account_id} from wishlist', request.remote_addr)\n    \n    return jsonify({'success': True, 'message': 'Đã xóa khỏi danh sách yêu thích'})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":18437},"extensions.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_migrate import Migrate\nfrom cryptography.fernet import Fernet\nimport os\n\ndb = SQLAlchemy()\nlogin_manager = LoginManager()\nmigrate = Migrate()\n\nencryption_key = os.environ.get('ENCRYPTION_KEY', Fernet.generate_key())\ncipher_suite = Fernet(encryption_key)\n","size_bytes":342},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField, TextAreaField, FloatField, SelectField\nfrom wtforms.validators import DataRequired, Email, EqualTo, ValidationError, Length, NumberRange\nfrom models import User\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Mật khẩu', validators=[DataRequired()])\n    remember = BooleanField('Ghi nhớ đăng nhập')\n\nclass RegisterForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    username = StringField('Tên đăng nhập', validators=[DataRequired(), Length(min=3, max=80)])\n    full_name = StringField('Họ và tên', validators=[DataRequired(), Length(max=120)])\n    phone = StringField('Số điện thoại', validators=[Length(max=20)])\n    password = PasswordField('Mật khẩu', validators=[DataRequired(), Length(min=6)])\n    password2 = PasswordField('Xác nhận mật khẩu', validators=[DataRequired(), EqualTo('password')])\n    \n    def validate_email(self, email):\n        user = User.query.filter_by(email=email.data).first()\n        if user:\n            raise ValidationError('Email đã được sử dụng.')\n    \n    def validate_username(self, username):\n        user = User.query.filter_by(username=username.data).first()\n        if user:\n            raise ValidationError('Tên đăng nhập đã tồn tại.')\n\nclass CheckoutForm(FlaskForm):\n    customer_name = StringField('Họ và tên', validators=[DataRequired(), Length(max=120)])\n    customer_email = StringField('Email', validators=[DataRequired(), Email()])\n    customer_phone = StringField('Số điện thoại', validators=[Length(max=20)])\n\nclass AccountForm(FlaskForm):\n    title = StringField('Tiêu đề tài khoản', validators=[DataRequired(), Length(max=200)])\n    description = TextAreaField('Mô tả')\n    category = SelectField('Thể loại', choices=[\n        ('Premium', 'Premium'),\n        ('VIP', 'VIP'),\n        ('Standard', 'Standard'),\n        ('Special', 'Special')\n    ], validators=[DataRequired()])\n    rank = SelectField('Rank', choices=[\n        ('Cao', 'Cao'),\n        ('Trung bình', 'Trung bình'),\n        ('Thấp', 'Thấp'),\n        ('Elite', 'Elite')\n    ])\n    price = FloatField('Giá (VNĐ)', validators=[DataRequired(), NumberRange(min=0)])\n    account_username = StringField('Tên tài khoản game')\n    account_password = StringField('Mật khẩu tài khoản game')\n    internal_notes = TextAreaField('Ghi chú nội bộ')\n","size_bytes":2571},"init_db.py":{"content":"import os\nfrom app import app, db\nfrom models import User, GameAccount, Order, CartItem, AuditLog\nfrom extensions import cipher_suite\n\ndef init_database():\n    with app.app_context():\n        print(\"Creating database tables...\")\n        db.create_all()\n        \n        if User.query.first() is None:\n            print(\"Adding sample data...\")\n            \n            superadmin = User(\n                email='superadmin@shopaccgarena.vn',\n                username='superadmin',\n                full_name='Super Admin',\n                phone='0912345678',\n                is_admin=True,\n                role='superadmin'\n            )\n            superadmin.set_password('SuperAdmin@2024!Secure')\n            db.session.add(superadmin)\n            \n            admin = User(\n                email='admin@shopaccgarena.vn',\n                username='admin',\n                full_name='Quản trị viên',\n                phone='0912345679',\n                is_admin=True,\n                role='admin'\n            )\n            admin.set_password('Admin@2024!Secure')\n            db.session.add(admin)\n            \n            support = User(\n                email='support@shopaccgarena.vn',\n                username='support',\n                full_name='Nhân viên hỗ trợ',\n                phone='0912345680',\n                is_admin=True,\n                role='support'\n            )\n            support.set_password('Support@2024!Secure')\n            db.session.add(support)\n            \n            user = User(\n                email='user@example.com',\n                username='testuser',\n                full_name='Nguyễn Văn A',\n                phone='0987654321',\n                is_admin=False,\n                role='user'\n            )\n            user.set_password('user123')\n            db.session.add(user)\n            \n            accounts_data = [\n                {\n                    'title': 'Tài khoản Premium Elite',\n                    'description': 'Tài khoản premium cao cấp với nhiều trang bị hiếm. Đã chơi lâu năm, có nhiều skin độc quyền.',\n                    'category': 'Premium',\n                    'rank': 'Elite',\n                    'price': 500000,\n                    'username': 'premiumuser01',\n                    'password': 'Pass@2024'\n                },\n                {\n                    'title': 'Tài khoản VIP Rank Cao',\n                    'description': 'VIP với rank cao, nhiều thành tích. Phù hợp cho người muốn chơi ở cấp độ cao.',\n                    'category': 'VIP',\n                    'rank': 'Cao',\n                    'price': 750000,\n                    'username': 'vipuser01',\n                    'password': 'VipPass123'\n                },\n                {\n                    'title': 'Tài khoản Standard',\n                    'description': 'Tài khoản tiêu chuẩn cho người mới bắt đầu. Có đầy đủ tính năng cơ bản.',\n                    'category': 'Standard',\n                    'rank': 'Trung bình',\n                    'price': 200000,\n                    'username': 'standard01',\n                    'password': 'Std2024'\n                },\n                {\n                    'title': 'Tài khoản Special Edition',\n                    'description': 'Phiên bản đặc biệt với các vật phẩm giới hạn. Không có nhiều trên thị trường.',\n                    'category': 'Special',\n                    'rank': 'Elite',\n                    'price': 1200000,\n                    'username': 'special01',\n                    'password': 'Special@123'\n                },\n                {\n                    'title': 'Tài khoản Premium Starter',\n                    'description': 'Premium cho người mới với nhiều ưu đãi khởi đầu. Dễ dàng phát triển.',\n                    'category': 'Premium',\n                    'rank': 'Thấp',\n                    'price': 350000,\n                    'username': 'premstarter01',\n                    'password': 'Start@2024'\n                },\n                {\n                    'title': 'Tài khoản VIP Pro',\n                    'description': 'VIP Pro với đầy đủ tính năng cao cấp nhất. Trải nghiệm tốt nhất.',\n                    'category': 'VIP',\n                    'rank': 'Elite',\n                    'price': 980000,\n                    'username': 'vippro01',\n                    'password': 'Pro@VIP2024'\n                },\n                {\n                    'title': 'Tài khoản Standard Plus',\n                    'description': 'Nâng cấp từ bản standard với thêm nhiều tính năng. Giá cả phải chăng.',\n                    'category': 'Standard',\n                    'rank': 'Trung bình',\n                    'price': 280000,\n                    'username': 'stdplus01',\n                    'password': 'StdPlus123'\n                },\n                {\n                    'title': 'Tài khoản Premium Master',\n                    'description': 'Master level premium với tất cả unlock. Dành cho người chơi chuyên nghiệp.',\n                    'category': 'Premium',\n                    'rank': 'Elite',\n                    'price': 1500000,\n                    'username': 'master01',\n                    'password': 'Master@Pro'\n                }\n            ]\n            \n            for acc_data in accounts_data:\n                encrypted_username = cipher_suite.encrypt(acc_data['username'].encode()).decode()\n                encrypted_password = cipher_suite.encrypt(acc_data['password'].encode()).decode()\n                \n                account = GameAccount(\n                    title=acc_data['title'],\n                    description=acc_data['description'],\n                    category=acc_data['category'],\n                    rank=acc_data['rank'],\n                    price=acc_data['price'],\n                    account_username=encrypted_username,\n                    account_password=encrypted_password,\n                    is_sold=False\n                )\n                db.session.add(account)\n            \n            db.session.commit()\n            print(\"Sample data added successfully!\")\n            print(\"\\n=== IMPORTANT: Admin Credentials (DO NOT SHARE) ===\")\n            print(\"\\nSuper Admin: superadmin@shopaccgarena.vn / SuperAdmin@2024!Secure\")\n            print(\"Admin: admin@shopaccgarena.vn / Admin@2024!Secure\")\n            print(\"Support: support@shopaccgarena.vn / Support@2024!Secure\")\n            print(\"\\n=== Public Demo Account ===\")\n            print(\"User Demo: user@example.com / user123\")\n            print(\"\\nNOTE: Admin passwords are complex and should be changed in production!\")\n        else:\n            print(\"Database already initialized!\")\n\nif __name__ == '__main__':\n    init_database()\n","size_bytes":6886},"models.py":{"content":"from extensions import db, cipher_suite\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False, index=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    full_name = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    is_admin = db.Column(db.Boolean, default=False)\n    role = db.Column(db.String(20), default='user')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    orders = db.relationship('Order', backref='user', lazy='dynamic')\n    cart_items = db.relationship('CartItem', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    wishlist_items = db.relationship('Wishlist', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def has_permission(self, required_role):\n        role_hierarchy = {'user': 0, 'support': 1, 'admin': 2, 'superadmin': 3}\n        user_level = role_hierarchy.get(self.role, 0)\n        required_level = role_hierarchy.get(required_role, 0)\n        return user_level >= required_level\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n\nclass GameAccount(db.Model):\n    __tablename__ = 'game_accounts'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    category = db.Column(db.String(100), nullable=False, index=True)\n    rank = db.Column(db.String(50))\n    price = db.Column(db.Float, nullable=False)\n    account_username = db.Column(db.Text, nullable=False)\n    account_password = db.Column(db.Text, nullable=False)\n    is_sold = db.Column(db.Boolean, default=False, index=True)\n    internal_notes = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    order_id = db.Column(db.Integer, db.ForeignKey('orders.id'))\n    \n    def get_decrypted_username(self):\n        try:\n            return cipher_suite.decrypt(self.account_username.encode()).decode()\n        except Exception:\n            return '[Lỗi giải mã]'\n    \n    def get_decrypted_password(self):\n        try:\n            return cipher_suite.decrypt(self.account_password.encode()).decode()\n        except Exception:\n            return '[Lỗi giải mã]'\n    \n    def __repr__(self):\n        return f'<GameAccount {self.title}>'\n\nclass Order(db.Model):\n    __tablename__ = 'orders'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    total_amount = db.Column(db.Float, nullable=False)\n    status = db.Column(db.String(20), default='pending', index=True)\n    customer_name = db.Column(db.String(120), nullable=False)\n    customer_email = db.Column(db.String(120), nullable=False)\n    customer_phone = db.Column(db.String(20))\n    admin_notes = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    accounts = db.relationship('GameAccount', backref='order', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Order {self.id}>'\n\nclass CartItem(db.Model):\n    __tablename__ = 'cart_items'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    account_id = db.Column(db.Integer, db.ForeignKey('game_accounts.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    account = db.relationship('GameAccount', backref='cart_items')\n    \n    def __repr__(self):\n        return f'<CartItem {self.id}>'\n\nclass AuditLog(db.Model):\n    __tablename__ = 'audit_logs'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n    action = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    ip_address = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow, index=True)\n    \n    user = db.relationship('User', backref='audit_logs')\n    \n    @staticmethod\n    def create_log(user_id, action, description, ip_address=None):\n        log = AuditLog(\n            user_id=user_id,\n            action=action,\n            description=description,\n            ip_address=ip_address\n        )\n        db.session.add(log)\n        db.session.commit()\n        return log\n    \n    def __repr__(self):\n        return f'<AuditLog {self.action}>'\n\nclass Wishlist(db.Model):\n    __tablename__ = 'wishlists'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    account_id = db.Column(db.Integer, db.ForeignKey('game_accounts.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    account = db.relationship('GameAccount', backref='wishlist_items')\n    \n    def __repr__(self):\n        return f'<Wishlist {self.id}>'\n","size_bytes":5554},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"cryptography>=46.0.2\",\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-migrate>=4.1.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-wtf>=1.2.2\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-dotenv>=1.1.1\",\n]\n","size_bytes":390},"replit.md":{"content":"# Shop Acc Garena - Vietnamese Gaming Account Marketplace\n\n## Overview\nA professional Vietnamese gaming account marketplace website that sells game accounts without displaying specific game names. Built with Python Flask, featuring a modern responsive design inspired by Steam and Epic Games stores.\n\n## Current State\n✅ **Fully functional and running on port 5000**\n- User authentication system with login/register\n- Complete shopping cart and checkout flow\n- Admin management system with CRUD operations\n- Responsive design with dual navigation (horizontal + vertical sidebar)\n- Database initialized with sample accounts\n- Vietnamese language interface throughout\n\n## Tech Stack\n- **Backend**: Python Flask, SQLAlchemy, Flask-Login\n- **Database**: PostgreSQL with encrypted credentials\n- **Frontend**: Bootstrap 5, Font Awesome 6, AOS animations\n- **Security**: Cryptography for account credentials encryption\n\n## Key Features Implemented\n\n### Customer Features\n1. **Browse & Search**: Filter accounts by category, rank, price range\n2. **Account Details**: View full specifications (credentials hidden until purchase)\n3. **Shopping Cart**: Add/remove accounts before checkout\n4. **Checkout Process**: 2-step checkout with customer information\n5. **Order History**: View all orders and purchased account credentials\n6. **User Profile**: Manage personal information\n\n### Admin Features\n1. **Dashboard**: Revenue stats, account counts, pending orders\n2. **Account Management**: Add, edit, delete accounts with CSV import capability\n3. **Order Management**: Update order status (pending/processing/completed/cancelled)\n4. **Audit Logs**: Track all admin actions with timestamps\n5. **Role-Based Access**: Super Admin/Admin/Support roles\n\n### Design Features\n- **Color Scheme**: Garena orange (#FF6600), tech black (#1A1A1A), cyber blue (#00D4FF)\n- **Navigation**: Horizontal top menu for user account + vertical sidebar for main navigation\n- **Responsive**: Works on desktop, tablet, and mobile (breakpoints: 1200px/992px/768px/480px)\n- **Animations**: Smooth card animations, hover effects, loading screen\n- **Security**: Encrypted account credentials, rate limiting ready\n\n## Database Schema\n\n### Users\n- Email, username, password (hashed)\n- Full name, phone, admin role\n- Created timestamp\n\n### Game Accounts\n- Title, description, category, rank\n- Price, encrypted credentials\n- Sold status, order relationship\n- Internal admin notes\n\n### Orders\n- User, total amount, status\n- Customer contact details\n- Admin notes, timestamps\n\n### Cart Items\n- User-account relationships\n- Temporary storage before checkout\n\n### Audit Logs\n- User actions, descriptions\n- IP address, timestamps\n\n## Default Credentials\n\n### Admin Account (Security Enhanced)\n- Email: admin@shopaccgarena.vn\n- Password: SuperAdmin@2024!Secure (complex password in init_db.py)\n- Access: Full admin panel\n- **Note**: Admin credentials NOT displayed on login page for security\n\n### Test User Account (Demo Display)\n- Email: user@example.com\n- Password: user123\n- Access: Customer features\n- **Feature**: Click-to-autofill on login page for easy testing\n\n## Sample Data\n8 sample game accounts with different categories:\n- Premium (Elite/Starter/Master): ₫350,000 - ₫1,500,000\n- VIP (Cao/Elite/Pro): ₫750,000 - ₫980,000\n- Standard (Trung bình/Plus): ₫200,000 - ₫280,000\n- Special (Elite): ₫1,200,000\n\n## File Structure\n```\n├── app.py                 # Main Flask application\n├── models.py             # Database models\n├── forms.py              # WTForms definitions\n├── extensions.py         # Flask extensions initialization\n├── init_db.py           # Database setup script\n├── templates/           # Jinja2 templates\n│   ├── base.html       # Base template with navigation\n│   ├── index.html      # Home/shop page\n│   ├── account_detail.html\n│   ├── cart.html\n│   ├── checkout.html\n│   ├── orders.html\n│   ├── order_detail.html\n│   ├── profile.html\n│   ├── login.html\n│   ├── register.html\n│   └── admin/          # Admin templates\n│       ├── dashboard.html\n│       ├── accounts.html\n│       ├── account_form.html\n│       ├── orders.html\n│       └── logs.html\n└── static/\n    ├── css/style.css   # Custom styles\n    └── js/main.js      # JavaScript interactions\n```\n\n## How to Use\n\n### As a Customer\n1. Browse accounts on the homepage\n2. Register/login to add items to cart\n3. Complete checkout with your information\n4. View purchased account credentials in \"Đơn hàng của tôi\"\n\n### As an Admin\n1. Login with admin credentials\n2. Access admin menu in sidebar\n3. Add/edit/delete accounts\n4. Manage orders and update statuses\n5. Review audit logs for security\n\n## Recent Changes (October 2, 2025)\n\n### Latest Updates - Session 2\n- ✅ **Fixed \"View Details\" button**: Resolved z-index and pointer-events CSS conflict that prevented button clicks\n- ✅ **Demo account display**: Added demo credentials section on login page (user@example.com only for security)\n- ✅ **Click-to-autofill**: Users can click demo account to auto-populate login form\n- ✅ **Loading screen fix**: Added dual fallback mechanism (DOMContentLoaded + window load events)\n- ✅ **Security enhancement**: Changed admin passwords to complex format (SuperAdmin@2024!Secure)\n- ✅ **CSS improvements**: Better styling for account cards and demo sections\n\n### Initial Implementation - Session 1\n- ✅ Created complete Flask application structure\n- ✅ Implemented user authentication with Flask-Login\n- ✅ Built responsive UI with Bootstrap 5 + custom CSS\n- ✅ Created dual navigation system (horizontal + vertical)\n- ✅ Added shopping cart and checkout functionality\n- ✅ Implemented admin dashboard with statistics\n- ✅ Created CRUD operations for account management\n- ✅ Added audit logging system\n- ✅ Encrypted account credentials with Cryptography\n- ✅ Initialized database with sample data\n- ✅ Set up workflow and tested successfully\n\n## Security Features\n- Password hashing with Werkzeug\n- Account credentials encrypted with Fernet\n- Session management with Flask-Login\n- CSRF protection with Flask-WTF\n- Admin-only route protection\n- Audit trail for all admin actions\n\n## Future Enhancements (Not Implemented)\n- Sapo payment gateway integration\n- Email notifications for orders\n- CSV import for bulk account uploads\n- 2FA for admin accounts\n- Rate limiting for API endpoints\n- Dark theme toggle\n- Advanced search filters\n- User reviews/ratings\n\n## Notes\n- No specific game names are displayed (uses categories: Premium/VIP/Standard/Special)\n- All text and interface in Vietnamese\n- Credentials only visible after order status = 'completed'\n- Admin can manually update order status to simulate payment completion\n- Sample accounts included for testing the full flow\n\n## Environment Variables Required\n- DATABASE_URL: PostgreSQL connection string (auto-set by Replit)\n- SECRET_KEY: Flask secret key (defaults to dev key)\n- ENCRYPTION_KEY: Fernet encryption key (auto-generated)\n\n## Project Status\n🟢 **Production Ready** - All core features implemented and tested\n- User flow: Browse → Login → Add to Cart → Checkout → View Credentials ✅\n- Admin flow: Login → Manage Accounts → Manage Orders → View Logs ✅\n- UI/UX: Responsive, animated, Vietnamese language ✅\n- Security: Encrypted credentials, role-based access ✅\n","size_bytes":7490},"static/css/style.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Roboto:wght@300;400;500;700&display=swap');\n\n:root {\n    --primary-orange: #FF6600;\n    --primary-orange-light: #FF8533;\n    --tech-black: #1A1A1A;\n    --cyber-blue: #00D4FF;\n    --cyber-blue-dark: #00A8CC;\n    --light-grey: #F8F9FA;\n    --dark-grey: #333333;\n    --success-green: #28A745;\n    --purple-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --orange-gradient: linear-gradient(135deg, #FF6600 0%, #FF8533 100%);\n    --blue-gradient: linear-gradient(135deg, #00D4FF 0%, #00A8CC 100%);\n    --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    --hover-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);\n    --glass-bg: rgba(255, 255, 255, 0.1);\n    --glass-border: rgba(255, 255, 255, 0.2);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', 'Roboto', sans-serif;\n    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n    background-attachment: fixed;\n    color: var(--dark-grey);\n    min-height: 100vh;\n    position: relative;\n}\n\nbody::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: \n        radial-gradient(circle at 20% 50%, rgba(255, 102, 0, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 80%, rgba(0, 212, 255, 0.1) 0%, transparent 50%);\n    pointer-events: none;\n    z-index: 0;\n}\n\n.container-fluid {\n    position: relative;\n    z-index: 1;\n}\n\n#loading-screen {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: var(--tech-black);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n    opacity: 1;\n    transition: opacity 0.5s ease;\n}\n\n#loading-screen.hidden {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.loading-content {\n    text-align: center;\n    color: white;\n}\n\n.loading-spinner {\n    width: 60px;\n    height: 60px;\n    border: 4px solid rgba(255, 102, 0, 0.3);\n    border-top: 4px solid var(--primary-orange);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin: 0 auto 20px;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.modern-navbar {\n    background: linear-gradient(135deg, var(--tech-black) 0%, #2A2A2A 100%);\n    backdrop-filter: blur(10px);\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n    padding: 0.75rem 0;\n    z-index: 1030;\n}\n\n.modern-brand {\n    font-size: 1.5rem;\n    font-weight: 700;\n    transition: all 0.3s ease;\n}\n\n.brand-text {\n    background: linear-gradient(135deg, var(--primary-orange), var(--cyber-blue));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.modern-brand:hover {\n    transform: scale(1.05);\n}\n\n.modern-navbar .nav-link {\n    color: rgba(255, 255, 255, 0.85);\n    font-weight: 500;\n    padding: 0.5rem 1rem;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    position: relative;\n}\n\n.modern-navbar .nav-link:hover {\n    color: var(--primary-orange);\n    background: rgba(255, 102, 0, 0.1);\n    transform: translateY(-2px);\n}\n\n.modern-navbar .nav-link.active {\n    color: var(--primary-orange);\n    background: rgba(255, 102, 0, 0.15);\n}\n\n.modern-navbar .nav-link.active::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 30px;\n    height: 3px;\n    background: var(--primary-orange);\n    border-radius: 2px;\n}\n\n.mega-dropdown .mega-menu {\n    min-width: 250px;\n    padding: 0.5rem 0;\n    background: rgba(26, 26, 26, 0.98);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 102, 0, 0.2);\n    border-radius: 12px;\n    margin-top: 0.5rem;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n}\n\n.mega-menu .dropdown-item {\n    color: rgba(255, 255, 255, 0.8);\n    padding: 0.75rem 1.5rem;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.mega-menu .dropdown-item:hover {\n    background: rgba(255, 102, 0, 0.15);\n    color: var(--primary-orange);\n    transform: translateX(5px);\n}\n\n.mega-menu .dropdown-item i {\n    font-size: 1.1rem;\n}\n\n.user-dropdown .user-avatar {\n    font-size: 1.8rem;\n    color: var(--cyber-blue);\n}\n\n.user-dropdown .user-name {\n    font-weight: 500;\n}\n\n.user-dropdown .user-menu {\n    min-width: 280px;\n    padding: 0;\n    background: rgba(26, 26, 26, 0.98);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 102, 0, 0.2);\n    border-radius: 12px;\n    margin-top: 0.5rem;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n}\n\n.user-menu .dropdown-header {\n    padding: 1rem 1.5rem;\n    background: linear-gradient(135deg, rgba(255, 102, 0, 0.1), rgba(0, 212, 255, 0.1));\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.user-menu .dropdown-item {\n    color: rgba(255, 255, 255, 0.8);\n    padding: 0.75rem 1.5rem;\n    transition: all 0.3s ease;\n}\n\n.user-menu .dropdown-item:hover {\n    background: rgba(255, 102, 0, 0.1);\n    color: var(--primary-orange);\n    transform: translateX(5px);\n}\n\n.user-menu .dropdown-item i {\n    margin-right: 0.75rem;\n    width: 20px;\n}\n\n.main-content-full {\n    min-height: calc(100vh - 76px);\n    padding-bottom: 60px;\n}\n\n.hero-section {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, var(--primary-orange) 100%);\n    color: white;\n    padding: 4rem 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    border-radius: 25px;\n    box-shadow: 0 20px 60px rgba(102, 126, 234, 0.3);\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);\n    animation: pulse 15s ease-in-out infinite;\n}\n\n@keyframes pulse {\n    0%, 100% { transform: translate(0, 0) scale(1); }\n    50% { transform: translate(-10%, -10%) scale(1.1); }\n}\n\n.hero-section h1 {\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 1rem;\n}\n\n.hero-section p {\n    font-size: 1.2rem;\n    opacity: 0.9;\n}\n\n.filter-section {\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    padding: 1.5rem;\n    border-radius: 20px;\n    box-shadow: var(--card-shadow);\n    margin-bottom: 2rem;\n    transition: all 0.3s ease;\n}\n\n.filter-section:hover {\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);\n    transform: translateY(-2px);\n}\n\n.account-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    border-radius: 20px;\n    padding: 1.5rem;\n    box-shadow: var(--card-shadow);\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    height: 100%;\n    position: relative;\n    overflow: hidden;\n}\n\n.account-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 5px;\n    background: linear-gradient(90deg, var(--primary-orange), var(--cyber-blue), #667eea);\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.4s ease;\n}\n\n.account-card::after {\n    content: '';\n    position: absolute;\n    top: -50%;\n    right: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 102, 0, 0.1) 0%, transparent 70%);\n    opacity: 0;\n    transition: opacity 0.4s ease;\n    pointer-events: none;\n    z-index: 0;\n}\n\n.account-card:hover {\n    transform: translateY(-10px) scale(1.02);\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n    border-color: rgba(255, 102, 0, 0.3);\n}\n\n.account-card:hover::before {\n    transform: scaleX(1);\n}\n\n.account-card:hover::after {\n    opacity: 1;\n}\n\n.account-card h5 {\n    color: var(--tech-black);\n    font-weight: 600;\n    margin-bottom: 0.75rem;\n    position: relative;\n    z-index: 1;\n}\n\n.account-card .btn {\n    position: relative;\n    z-index: 2;\n}\n\n.account-price {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: var(--primary-orange);\n    margin: 1rem 0;\n}\n\n.account-tags {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    margin: 1rem 0;\n}\n\n.tag {\n    background: var(--light-grey);\n    padding: 0.25rem 0.75rem;\n    border-radius: 20px;\n    font-size: 0.875rem;\n    color: var(--dark-grey);\n}\n\n.tag.rank {\n    background: linear-gradient(135deg, var(--cyber-blue), #00A8CC);\n    color: white;\n}\n\n.tag.sold {\n    background: #DC3545;\n    color: white;\n}\n\n.tag.available {\n    background: var(--success-green);\n    color: white;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-orange), var(--primary-orange-light));\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 12px;\n    font-weight: 600;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-primary::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n}\n\n.btn-primary:hover::before {\n    width: 300px;\n    height: 300px;\n}\n\n.btn-primary:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 10px 25px rgba(255, 102, 0, 0.4);\n}\n\n.btn-secondary {\n    background: linear-gradient(135deg, var(--cyber-blue), var(--cyber-blue-dark));\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 12px;\n    font-weight: 600;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-secondary::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n}\n\n.btn-secondary:hover::before {\n    width: 300px;\n    height: 300px;\n}\n\n.btn-secondary:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 10px 25px rgba(0, 212, 255, 0.4);\n}\n\n.auth-container {\n    max-width: 600px;\n    margin: 2rem auto 4rem;\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    padding: 2.5rem;\n    border-radius: 20px;\n    box-shadow: var(--card-shadow);\n}\n\n.auth-container h2 {\n    text-align: center;\n    margin-bottom: 2rem;\n    color: var(--tech-black);\n    font-weight: 700;\n}\n\n.demo-accounts {\n    background: linear-gradient(135deg, rgba(255, 102, 0, 0.08), rgba(0, 212, 255, 0.08));\n    border: 2px solid rgba(255, 102, 0, 0.3);\n    border-radius: 15px;\n    padding: 1.5rem;\n    margin-top: 2rem;\n    box-shadow: 0 5px 20px rgba(255, 102, 0, 0.15);\n}\n\n.demo-accounts h6 {\n    color: var(--primary-orange);\n    font-weight: 700;\n    margin-bottom: 1rem;\n    font-size: 1rem;\n}\n\n.demo-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n}\n\n.demo-account {\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: 10px;\n    padding: 1rem;\n    transition: all 0.3s ease;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.demo-account:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 5px 15px rgba(255, 102, 0, 0.2);\n    border-color: var(--primary-orange);\n}\n\n.demo-role {\n    display: inline-block;\n    padding: 0.25rem 0.75rem;\n    border-radius: 20px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.demo-role.super-admin {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n}\n\n.demo-role.admin {\n    background: linear-gradient(135deg, #FF6600, #FF8533);\n    color: white;\n}\n\n.demo-role.support {\n    background: linear-gradient(135deg, #00D4FF, #00A8CC);\n    color: white;\n}\n\n.demo-role.user {\n    background: linear-gradient(135deg, #28A745, #20C997);\n    color: white;\n}\n\n.demo-account small {\n    color: var(--dark-grey);\n    line-height: 1.6;\n}\n\n.demo-account strong {\n    color: var(--tech-black);\n    font-size: 0.95rem;\n}\n\n.demo-account:active {\n    transform: scale(0.98);\n}\n\n@media (max-width: 576px) {\n    .demo-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n.modern-toast {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    min-width: 300px;\n    max-width: 400px;\n    background: rgba(255, 255, 255, 0.98);\n    backdrop-filter: blur(20px);\n    border-radius: 16px;\n    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 1rem 1.25rem;\n    transform: translateX(120%);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    z-index: 10000;\n}\n\n.modern-toast.show {\n    transform: translateX(0);\n}\n\n.modern-toast.toast-success {\n    border-left: 4px solid #28A745;\n}\n\n.modern-toast.toast-error {\n    border-left: 4px solid #DC3545;\n}\n\n.modern-toast.toast-info {\n    border-left: 4px solid #00D4FF;\n}\n\n.toast-icon {\n    font-size: 1.5rem;\n    flex-shrink: 0;\n}\n\n.toast-content {\n    flex-grow: 1;\n}\n\n.toast-message {\n    color: var(--dark-grey);\n    font-weight: 500;\n    line-height: 1.4;\n}\n\n.toast-close {\n    background: none;\n    border: none;\n    color: #999;\n    cursor: pointer;\n    padding: 0.25rem;\n    font-size: 1rem;\n    transition: color 0.3s ease;\n    flex-shrink: 0;\n}\n\n.toast-close:hover {\n    color: var(--dark-grey);\n}\n\n.quick-actions {\n    position: fixed;\n    bottom: 30px;\n    right: 30px;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    z-index: 1000;\n}\n\n.quick-action-btn {\n    width: 56px;\n    height: 56px;\n    border-radius: 50%;\n    border: none;\n    background: linear-gradient(135deg, var(--primary-orange), var(--primary-orange-light));\n    color: white;\n    font-size: 1.25rem;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(255, 102, 0, 0.4);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.quick-action-btn:hover {\n    transform: scale(1.1) translateY(-3px);\n    box-shadow: 0 8px 25px rgba(255, 102, 0, 0.5);\n}\n\n.quick-action-btn:active {\n    transform: scale(0.95);\n}\n\n@media (max-width: 768px) {\n    .quick-actions {\n        bottom: 20px;\n        right: 20px;\n    }\n    \n    .quick-action-btn {\n        width: 48px;\n        height: 48px;\n        font-size: 1.1rem;\n    }\n}\n\n.form-control {\n    border: 2px solid #E8EAED;\n    border-radius: 8px;\n    padding: 0.75rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-orange);\n    box-shadow: 0 0 0 0.2rem rgba(255, 102, 0, 0.1);\n}\n\n.cart-item {\n    background: white;\n    padding: 1.5rem;\n    border-radius: 12px;\n    box-shadow: var(--card-shadow);\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.order-status {\n    display: inline-block;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    font-weight: 600;\n    font-size: 0.875rem;\n}\n\n.order-status.pending {\n    background: #FFC107;\n    color: var(--tech-black);\n}\n\n.order-status.processing {\n    background: #17A2B8;\n    color: white;\n}\n\n.order-status.completed {\n    background: var(--success-green);\n    color: white;\n}\n\n.order-status.cancelled {\n    background: #DC3545;\n    color: white;\n}\n\n.credentials-box {\n    background: var(--tech-black);\n    color: var(--cyber-blue);\n    padding: 1.5rem;\n    border-radius: 8px;\n    font-family: 'Courier New', monospace;\n    margin: 1rem 0;\n    position: relative;\n}\n\n.credentials-hidden {\n    background: var(--light-grey);\n    color: var(--dark-grey);\n    padding: 1.5rem;\n    border-radius: 8px;\n    text-align: center;\n    font-style: italic;\n}\n\n.admin-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.stat-card {\n    background: white;\n    padding: 1.5rem;\n    border-radius: 12px;\n    box-shadow: var(--card-shadow);\n    text-align: center;\n}\n\n.stat-card h3 {\n    font-size: 2rem;\n    font-weight: 700;\n    color: var(--primary-orange);\n    margin-bottom: 0.5rem;\n}\n\n.stat-card p {\n    color: var(--dark-grey);\n    font-weight: 500;\n}\n\n.table {\n    background: white;\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: var(--card-shadow);\n}\n\n.table thead {\n    background: var(--tech-black);\n    color: white;\n}\n\n.footer {\n    background: var(--tech-black);\n    color: rgba(255, 255, 255, 0.8);\n    padding: 3rem 0 1rem;\n    margin-top: 4rem;\n}\n\n.footer h5 {\n    color: white;\n    font-weight: 600;\n    margin-bottom: 1rem;\n}\n\n.footer-links {\n    list-style: none;\n    padding: 0;\n}\n\n.footer-links a {\n    color: rgba(255, 255, 255, 0.7);\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.footer-links a:hover {\n    color: var(--primary-orange);\n}\n\n@media (max-width: 992px) {\n    .sidebar {\n        transform: translateX(-100%);\n    }\n    \n    .sidebar.show {\n        transform: translateX(0);\n    }\n    \n    .main-content {\n        margin-left: 0;\n    }\n    \n    .horizontal-menu {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n}\n\n@media (max-width: 768px) {\n    .hero-section h1 {\n        font-size: 2rem;\n    }\n    \n    .account-card {\n        margin-bottom: 1rem;\n    }\n    \n    .admin-stats {\n        grid-template-columns: 1fr;\n    }\n}\n","size_bytes":17323},"static/js/main.js":{"content":"window.addEventListener('load', function() {\n    const loadingScreen = document.getElementById('loading-screen');\n    if (loadingScreen) {\n        loadingScreen.classList.add('hidden');\n    }\n    \n    if (typeof AOS !== 'undefined') {\n        AOS.init({\n            duration: 800,\n            once: true,\n            offset: 100\n        });\n    }\n});\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    setTimeout(() => {\n        const loadingScreen = document.getElementById('loading-screen');\n        if (loadingScreen) {\n            loadingScreen.classList.add('hidden');\n        }\n    }, 1500);\n\n    const alerts = document.querySelectorAll('.alert');\n    alerts.forEach(alert => {\n        setTimeout(() => {\n            alert.classList.remove('show');\n            setTimeout(() => alert.remove(), 300);\n        }, 5000);\n    });\n});\n\nfunction addToCart(accountId) {\n    fetch(`/add_to_cart/${accountId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n\nfunction removeFromCart(itemId) {\n    if (!confirm('Bạn có chắc muốn xóa tài khoản này khỏi giỏ hàng?')) {\n        return;\n    }\n    \n    fetch(`/remove_from_cart/${itemId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n\nfunction deleteAccount(accountId) {\n    if (!confirm('Bạn có chắc muốn xóa tài khoản này?')) {\n        return;\n    }\n    \n    fetch(`/admin/account/delete/${accountId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n\nfunction updateOrderStatus(orderId, status) {\n    fetch(`/admin/order/${orderId}/update_status`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status: status })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n\nfunction showToast(message, type) {\n    const toast = document.createElement('div');\n    toast.className = `modern-toast toast-${type}`;\n    \n    const icon = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle';\n    const iconColor = type === 'success' ? '#28A745' : type === 'error' ? '#DC3545' : '#00D4FF';\n    \n    toast.innerHTML = `\n        <div class=\"toast-icon\" style=\"color: ${iconColor}\">\n            <i class=\"fas ${icon}\"></i>\n        </div>\n        <div class=\"toast-content\">\n            <div class=\"toast-message\">${message}</div>\n        </div>\n        <button class=\"toast-close\" onclick=\"this.parentElement.remove()\">\n            <i class=\"fas fa-times\"></i>\n        </button>\n    `;\n    \n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.classList.add('show');\n    }, 100);\n    \n    setTimeout(() => {\n        toast.classList.remove('show');\n        setTimeout(() => toast.remove(), 400);\n    }, 4000);\n}\n\nfunction addToWishlist(accountId) {\n    fetch(`/wishlist/add/${accountId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            const heartIcon = document.querySelector(`button[onclick=\"addToWishlist(${accountId})\"] i`);\n            if (heartIcon) {\n                heartIcon.classList.replace('fa-heart-o', 'fa-heart');\n                heartIcon.style.color = '#FF6600';\n            }\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n\nfunction removeFromWishlist(accountId) {\n    fetch(`/wishlist/remove/${accountId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            showToast(data.message, 'success');\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        } else {\n            showToast(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showToast('Có lỗi xảy ra', 'error');\n    });\n}\n","size_bytes":5801}},"version":1}